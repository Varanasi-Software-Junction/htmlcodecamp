[
    {
        "question": "What is the correct format specifier for printing an integer using printf?",
        "options": {
            "A": "%f",
            "B": "%d",
            "C": "%c",
            "D": "%s"
        },
        "answer": "B",
        "explanation": "The format specifier `%d` is used to print an integer in `printf`."
    },
    {
        "question": "Which format specifier is used to scan an integer using scanf?",
        "options": {
            "A": "%d",
            "B": "%s",
            "C": "%c",
            "D": "%f"
        },
        "answer": "A",
        "explanation": "The `%d` format specifier is used to scan (read) integers with `scanf`."
    },
    {
        "question": "What format specifier is used to print a floating-point number with printf?",
        "options": {
            "A": "%d",
            "B": "%f",
            "C": "%s",
            "D": "%c"
        },
        "answer": "B",
        "explanation": "The `%f` format specifier is used to print floating-point numbers with `printf`."
    },
    {
        "question": "What is the output of printf(\"%d\", 10.5)?",
        "options": {
            "A": "10",
            "B": "10.5",
            "C": "Compiler error",
            "D": "Undefined behavior"
        },
        "answer": "C",
        "explanation": "Passing a floating-point number to `%d` will cause a compiler error because `%d` expects an integer."
    },
    {
        "question": "How do you scan a character using scanf?",
        "options": {
            "A": "%d",
            "B": "%f",
            "C": "%c",
            "D": "%s"
        },
        "answer": "C",
        "explanation": "The `%c` format specifier is used with `scanf` to read a single character."
    },
    {
        "question": "What format specifier is used to print a string?",
        "options": {
            "A": "%d",
            "B": "%s",
            "C": "%f",
            "D": "%c"
        },
        "answer": "B",
        "explanation": "The `%s` format specifier is used to print strings in `printf`."
    },
    {
        "question": "Which of the following is the correct way to read an integer using scanf?",
        "options": {
            "A": "scanf(\"%d\", num);",
            "B": "scanf(\"%d\", &num);",
            "C": "scanf(\"%d\", *num);",
            "D": "scanf(\"%f\", &num);"
        },
        "answer": "B",
        "explanation": "You must use `&num` in `scanf` to provide the address of the variable where the integer should be stored."
    },
    {
        "question": "What does the following code output: printf(\"%s\", \"Hello World\");?",
        "options": {
            "A": "Hello",
            "B": "World",
            "C": "Hello World",
            "D": "Compiler error"
        },
        "answer": "C",
        "explanation": "`printf(\"%s\", \"Hello World\")` will print the entire string `Hello World`."
    },
    {
        "question": "How do you limit the number of characters printed from a string?",
        "options": {
            "A": "printf(\"%.n\", string);",
            "B": "printf(\"%ns\", string);",
            "C": "printf(\"%.ns\", string);",
            "D": "printf(\"%.3s\", string);"
        },
        "answer": "D",
        "explanation": "`%.3s` limits the output to the first 3 characters of the string."
    },
    {
        "question": "What format specifier should be used to scan a float?",
        "options": {
            "A": "%d",
            "B": "%s",
            "C": "%f",
            "D": "%lf"
        },
        "answer": "C",
        "explanation": "The `%f` format specifier is used to scan floating-point numbers using `scanf`."
    },
    {
        "question": "What will be the output of printf(\"%d\", 'A');?",
        "options": {
            "A": "A",
            "B": "65",
            "C": "Compiler error",
            "D": "ASCII Error"
        },
        "answer": "B",
        "explanation": "`'A'` is the character with an ASCII value of 65, and `%d` will print that value."
    },
    {
        "question": "What happens if you forget the ampersand (&) in scanf for an integer?",
        "options": {
            "A": "The value will not be stored correctly",
            "B": "It will still work correctly",
            "C": "Compiler warning",
            "D": "Compiler error"
        },
        "answer": "A",
        "explanation": "Without the `&`, `scanf` cannot access the memory address of the variable, so the value will not be stored correctly."
    },
    {
        "question": "What format specifier is used to print a double?",
        "options": {
            "A": "%d",
            "B": "%f",
            "C": "%lf",
            "D": "%c"
        },
        "answer": "C",
        "explanation": "`%lf` is the format specifier used for printing double values in `printf`."
    },
    {
        "question": "How can you specify field width in printf for an integer?",
        "options": {
            "A": "%4d",
            "B": "%d.4",
            "C": "%.4d",
            "D": "%04d"
        },
        "answer": "A",
        "explanation": "`%4d` specifies a minimum field width of 4 for the integer, meaning the number will be padded with spaces if necessary."
    },
    {
        "question": "Which format specifier is used to scan a string?",
        "options": {
            "A": "%s",
            "B": "%d",
            "C": "%f",
            "D": "%c"
        },
        "answer": "A",
        "explanation": "The `%s` format specifier is used to scan strings with `scanf`."
    },
    {
        "question": "What will happen if scanf(\"%s\", name); is used without a size limit?",
        "options": {
            "A": "The program will run fine",
            "B": "It may cause a buffer overflow",
            "C": "The string will not be read",
            "D": "The program will crash"
        },
        "answer": "B",
        "explanation": "If no size limit is specified, it may cause a buffer overflow if the input exceeds the allocated memory size for `name`."
    },
    {
        "question": "Which specifier is used to print a hexadecimal number?",
        "options": {
            "A": "%d",
            "B": "%x",
            "C": "%o",
            "D": "%h"
        },
        "answer": "B",
        "explanation": "`%x` is used to print a number in hexadecimal format."
    },
    {
        "question": "What is the difference between %f and %lf in printf?",
        "options": {
            "A": "No difference",
            "B": "%f is for float, %lf is for double",
            "C": "%f is for double, %lf is for long float",
            "D": "%f prints an integer"
        },
        "answer": "A",
        "explanation": "In `printf`, there is no difference between `%f` and `%lf`; both can be used for float or double."
    },
    {
        "question": "Which format specifier is used for reading a long integer in scanf?",
        "options": {
            "A": "%d",
            "B": "%ld",
            "C": "%f",
            "D": "%lf"
        },
        "answer": "B",
        "explanation": "`%ld` is used to read long integers with `scanf`."
    },
    {
        "question": "What will be the output of printf(\"%10d\", 42)?",
        "options": {
            "A": "0000000042",
            "B": "42",
            "C": "        42",
            "D": "Compiler error"
        },
        "answer": "C",
        "explanation": "`%10d` specifies a field width of 10, so the number will be right-aligned and padded with spaces."
    },
    {
        "question": "How do you scan multiple variables in a single scanf call?",
        "options": {
            "A": "scanf(\"%d, %d\", &a, &b);",
            "B": "scanf(\"%d %d\", a, b);",
            "C": "scanf(\"%d %d\", &a, &b);",
            "D": "scanf(\"%d %d\", &a &b);"
        },
        "answer": "C",
        "explanation": "In `scanf`, multiple format specifiers can be used, separated by spaces, and each corresponding variable must be passed with `&`."
    },
    {
        "question": "What will be the output of printf(\"%%d\", 42)?",
        "options": {
            "A": "42",
            "B": "%d",
            "C": "%%d",
            "D": "Compiler error"
        },
        "answer": "B",
        "explanation": "The `%%` in `printf` prints a literal `%` symbol, so the output will be `%d`."
    },
    {
        "question": "What will happen if you try to print a string without a terminating null character?",
        "options": {
            "A": "It will print garbage values",
            "B": "It will print only the first character",
            "C": "It will cause a segmentation fault",
            "D": "It will print the whole string"
        },
        "answer": "A",
        "explanation": "Without a null terminator, `printf` may print garbage values until it finds a null terminator elsewhere in memory."
    },
    {
        "question": "What is the format specifier for unsigned integers in printf?",
        "options": {
            "A": "%d",
            "B": "%u",
            "C": "%x",
            "D": "%o"
        },
        "answer": "B",
        "explanation": "`%u` is the format specifier used to print unsigned integers."
    },
    {
        "question": "Which format specifier is used to scan and print a short integer?",
        "options": {
            "A": "%hd",
            "B": "%d",
            "C": "%ld",
            "D": "%f"
        },
        "answer": "A",
        "explanation": "`%hd` is used to scan and print short integers."
    }
]
